-- -------------------------------------------------------------
-- 
-- File Name: D:\Salukat\Development\Software\Quartus\BladeRF\hdl\fpga\ip\salukat\max_frequency\vhdl\max_frequency\frequency_max.vhd
-- Created: 2020-12-29 17:32:45
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: frequency_max
-- Source Path: max_frequency/max_frequency/frequency_max
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.max_frequency_pkg.ALL;

ENTITY frequency_max IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_32_0                        :   IN    std_logic;
        enb_1_32_1                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        fft_data_re                       :   IN    vector_of_std_logic_vector12(0 TO 31);  -- sfix12 [32]
        fft_data_im                       :   IN    vector_of_std_logic_vector12(0 TO 31);  -- sfix12 [32]
        enable                            :   IN    std_logic;
        index_max                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        f_max                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END frequency_max;


ARCHITECTURE rtl OF frequency_max IS

  -- Component Declarations
  COMPONENT index_finder
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enable                          :   IN    std_logic;
          fft_data_re                     :   IN    vector_of_std_logic_vector12(0 TO 31);  -- sfix12 [32]
          fft_data_im                     :   IN    vector_of_std_logic_vector12(0 TO 31);  -- sfix12 [32]
          index_max                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          index_max1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT index2frequency
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_32_1                      :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          index_max                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : index_finder
    USE ENTITY work.index_finder(rtl);

  FOR ALL : index2frequency
    USE ENTITY work.index2frequency(rtl);

  -- Signals
  SIGNAL index_finder_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL index_finder_out2                : std_logic;
  SIGNAL index2frequency_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_index_finder : index_finder
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_32_0 => enb_1_32_0,
              enable => enable,
              fft_data_re => fft_data_re,  -- sfix12 [32]
              fft_data_im => fft_data_im,  -- sfix12 [32]
              index_max => index_finder_out1,  -- uint32
              index_max1 => index_finder_out2
              );

  u_index2frequency : index2frequency
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_32_1 => enb_1_32_1,
              enb => enb,
              Enable => index_finder_out2,
              index_max => index_finder_out1,  -- uint32
              Out1 => index2frequency_out1  -- uint32
              );

  index_max <= index_finder_out1;

  f_max <= index2frequency_out1;

END rtl;


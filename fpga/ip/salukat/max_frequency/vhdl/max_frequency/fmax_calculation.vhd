-- -------------------------------------------------------------
-- 
-- File Name: D:\Salukat\Development\Software\Quartus\BladeRF\hdl\fpga\ip\salukat\max_frequency\vhdl\max_frequency\fmax_calculation.vhd
-- Created: 2020-12-29 17:32:44
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fmax_calculation
-- Source Path: max_frequency/max_frequency/frequency_max/index2frequency/fmax_calculation
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fmax_calculation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_32_1                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        index                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        f_step                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Enable                            :   IN    std_logic;
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END fmax_calculation;


ARCHITECTURE rtl OF fmax_calculation IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL index_unsigned                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL index_1                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL f_step_unsigned                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL f_step_1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_out1_bypass              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_out1_bypass_1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Out1_bypass_bypass_reg           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1_bypass_2            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_out1_last_value          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Product_out1_last_value_1        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL t_bypass_reg                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1_bypass_3            : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Enable_out3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Enable_out3 <= Enable;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  index_unsigned <= unsigned(index);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      index_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        index_1 <= index_unsigned;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  f_step_unsigned <= unsigned(f_step);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      f_step_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        f_step_1 <= f_step_unsigned;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_out1 <= resize(index_1 * f_step_1, 32);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  crp_out_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_bypass_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_bypass_1 <= Product_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Out1_bypass_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out1_bypass_bypass_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_1 = '1' THEN
        Out1_bypass_bypass_reg <= Product_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS Out1_bypass_bypass_process;

  
  Product_out1_bypass_2 <= Product_out1_bypass_1 WHEN enb_1_32_1 = '1' ELSE
      Out1_bypass_bypass_reg;

  Product_out1_last_value <= Product_out1_bypass_2;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_last_value_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_last_value_1 <= Product_out1_last_value;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Product_out1_bypass <= Product_out1_last_value_1 WHEN Enable_out3 = '0' ELSE
      Product_out1_1;

  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_1 = '1' THEN
        t_bypass_reg <= Product_out1_bypass;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Product_out1_bypass_3 <= Product_out1_bypass WHEN enb_1_32_1 = '1' ELSE
      t_bypass_reg;

  Out1 <= std_logic_vector(Product_out1_bypass_3);

END rtl;


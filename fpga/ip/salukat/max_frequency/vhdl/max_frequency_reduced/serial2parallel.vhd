-- -------------------------------------------------------------
-- 
-- File Name: D:\Salukat\Development\Software\Quartus\BladeRF\hdl\fpga\ip\salukat\max_frequency\vhdl\max_frequency_reduced\serial2parallel.vhd
-- Created: 2020-12-29 12:17:31
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: serial2parallel
-- Source Path: max_frequency_reduced/max_frequency/serial2parallel
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.max_frequency_pkg.ALL;

ENTITY serial2parallel IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        S_re                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        S_im                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        P_re                              :   OUT   vector_of_std_logic_vector12(0 TO 15);  -- sfix12 [16]
        P_im                              :   OUT   vector_of_std_logic_vector12(0 TO 15);  -- sfix12 [16]
        ValidOut                          :   OUT   std_logic
        );
END serial2parallel;


ARCHITECTURE rtl OF serial2parallel IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL Deserializer_contl_cnt           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Deserializer_contl_validOutput   : std_logic;
  SIGNAL Deserializer_innerRegEn          : std_logic;
  SIGNAL Deserializer_innerRegCtrolEn     : std_logic;
  SIGNAL Deserializer_outBypassEn         : std_logic;
  SIGNAL Deserializer_tapDelayEn          : std_logic;
  SIGNAL Deserializer_hOutSignalsContl    : std_logic;
  SIGNAL Deserializer_tapDelayEn_1        : std_logic;
  SIGNAL S_re_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL S_im_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Deserializer_tapDelayComp_reg_re : vector_of_signed12(0 TO 14);  -- sfix12 [15]
  SIGNAL Deserializer_tapDelayComp_reg_im : vector_of_signed12(0 TO 14);  -- sfix12 [15]
  SIGNAL Deserializer_tapDelayComp_reg_next_re : vector_of_signed12(0 TO 14);  -- sfix12 [15]
  SIGNAL Deserializer_tapDelayComp_reg_next_im : vector_of_signed12(0 TO 14);  -- sfix12 [15]
  SIGNAL Deserializer_tapout_re           : vector_of_signed12(0 TO 14);  -- sfix12 [15]
  SIGNAL Deserializer_tapout_im           : vector_of_signed12(0 TO 14);  -- sfix12 [15]
  SIGNAL Deserializer_muxOut_re           : vector_of_signed12(0 TO 15);  -- sfix12 [16]
  SIGNAL Deserializer_muxOut_im           : vector_of_signed12(0 TO 15);  -- sfix12 [16]
  SIGNAL Deserializer_out1_re             : vector_of_signed12(0 TO 15);  -- sfix12 [16]
  SIGNAL Deserializer_out1_im             : vector_of_signed12(0 TO 15);  -- sfix12 [16]
  SIGNAL Deserializer_out2                : std_logic;

BEGIN
  Deserializer_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer_contl_cnt <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Deserializer_contl_cnt = to_unsigned(16#0F#, 5) THEN 
          Deserializer_contl_cnt <= to_unsigned(16#00#, 5);
        ELSE 
          Deserializer_contl_cnt <= Deserializer_contl_cnt + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS Deserializer_contl_process;

  Deserializer_tapDelayEn <= hdlcoder_to_stdlogic(Deserializer_contl_cnt < to_unsigned(16#0F#, 5));
  
  Deserializer_contl_validOutput <= '1' WHEN Deserializer_contl_cnt = to_unsigned(16#0F#, 5) ELSE
      '0';
  
  Deserializer_hOutSignalsContl <= '1' WHEN Deserializer_contl_validOutput = '1' ELSE
      '0';
  
  Deserializer_innerRegEn <= '1' WHEN Deserializer_contl_validOutput = '1' ELSE
      '0';
  
  Deserializer_innerRegCtrolEn <= '1' WHEN Deserializer_contl_validOutput = '1' ELSE
      '0';
  Deserializer_outBypassEn <= '1';

  Deserializer_tapDelayEn_1 <= enb AND Deserializer_tapDelayEn;

  S_re_signed <= signed(S_re);

  S_im_signed <= signed(S_im);

  Deserializer_tapDelayComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer_tapDelayComp_reg_re(0) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(0) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(1) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(1) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(2) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(2) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(3) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(3) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(4) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(4) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(5) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(5) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(6) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(6) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(7) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(7) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(8) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(8) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(9) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(9) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(10) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(10) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(11) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(11) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(12) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(12) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(13) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(13) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_re(14) <= to_signed(16#000#, 12);
      Deserializer_tapDelayComp_reg_im(14) <= to_signed(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer_tapDelayEn_1 = '1' THEN
        Deserializer_tapDelayComp_reg_re(0) <= Deserializer_tapDelayComp_reg_next_re(0);
        Deserializer_tapDelayComp_reg_im(0) <= Deserializer_tapDelayComp_reg_next_im(0);
        Deserializer_tapDelayComp_reg_re(1) <= Deserializer_tapDelayComp_reg_next_re(1);
        Deserializer_tapDelayComp_reg_im(1) <= Deserializer_tapDelayComp_reg_next_im(1);
        Deserializer_tapDelayComp_reg_re(2) <= Deserializer_tapDelayComp_reg_next_re(2);
        Deserializer_tapDelayComp_reg_im(2) <= Deserializer_tapDelayComp_reg_next_im(2);
        Deserializer_tapDelayComp_reg_re(3) <= Deserializer_tapDelayComp_reg_next_re(3);
        Deserializer_tapDelayComp_reg_im(3) <= Deserializer_tapDelayComp_reg_next_im(3);
        Deserializer_tapDelayComp_reg_re(4) <= Deserializer_tapDelayComp_reg_next_re(4);
        Deserializer_tapDelayComp_reg_im(4) <= Deserializer_tapDelayComp_reg_next_im(4);
        Deserializer_tapDelayComp_reg_re(5) <= Deserializer_tapDelayComp_reg_next_re(5);
        Deserializer_tapDelayComp_reg_im(5) <= Deserializer_tapDelayComp_reg_next_im(5);
        Deserializer_tapDelayComp_reg_re(6) <= Deserializer_tapDelayComp_reg_next_re(6);
        Deserializer_tapDelayComp_reg_im(6) <= Deserializer_tapDelayComp_reg_next_im(6);
        Deserializer_tapDelayComp_reg_re(7) <= Deserializer_tapDelayComp_reg_next_re(7);
        Deserializer_tapDelayComp_reg_im(7) <= Deserializer_tapDelayComp_reg_next_im(7);
        Deserializer_tapDelayComp_reg_re(8) <= Deserializer_tapDelayComp_reg_next_re(8);
        Deserializer_tapDelayComp_reg_im(8) <= Deserializer_tapDelayComp_reg_next_im(8);
        Deserializer_tapDelayComp_reg_re(9) <= Deserializer_tapDelayComp_reg_next_re(9);
        Deserializer_tapDelayComp_reg_im(9) <= Deserializer_tapDelayComp_reg_next_im(9);
        Deserializer_tapDelayComp_reg_re(10) <= Deserializer_tapDelayComp_reg_next_re(10);
        Deserializer_tapDelayComp_reg_im(10) <= Deserializer_tapDelayComp_reg_next_im(10);
        Deserializer_tapDelayComp_reg_re(11) <= Deserializer_tapDelayComp_reg_next_re(11);
        Deserializer_tapDelayComp_reg_im(11) <= Deserializer_tapDelayComp_reg_next_im(11);
        Deserializer_tapDelayComp_reg_re(12) <= Deserializer_tapDelayComp_reg_next_re(12);
        Deserializer_tapDelayComp_reg_im(12) <= Deserializer_tapDelayComp_reg_next_im(12);
        Deserializer_tapDelayComp_reg_re(13) <= Deserializer_tapDelayComp_reg_next_re(13);
        Deserializer_tapDelayComp_reg_im(13) <= Deserializer_tapDelayComp_reg_next_im(13);
        Deserializer_tapDelayComp_reg_re(14) <= Deserializer_tapDelayComp_reg_next_re(14);
        Deserializer_tapDelayComp_reg_im(14) <= Deserializer_tapDelayComp_reg_next_im(14);
      END IF;
    END IF;
  END PROCESS Deserializer_tapDelayComp_process;

  Deserializer_tapout_re(0) <= Deserializer_tapDelayComp_reg_re(0);
  Deserializer_tapout_im(0) <= Deserializer_tapDelayComp_reg_im(0);
  Deserializer_tapout_re(1) <= Deserializer_tapDelayComp_reg_re(1);
  Deserializer_tapout_im(1) <= Deserializer_tapDelayComp_reg_im(1);
  Deserializer_tapout_re(2) <= Deserializer_tapDelayComp_reg_re(2);
  Deserializer_tapout_im(2) <= Deserializer_tapDelayComp_reg_im(2);
  Deserializer_tapout_re(3) <= Deserializer_tapDelayComp_reg_re(3);
  Deserializer_tapout_im(3) <= Deserializer_tapDelayComp_reg_im(3);
  Deserializer_tapout_re(4) <= Deserializer_tapDelayComp_reg_re(4);
  Deserializer_tapout_im(4) <= Deserializer_tapDelayComp_reg_im(4);
  Deserializer_tapout_re(5) <= Deserializer_tapDelayComp_reg_re(5);
  Deserializer_tapout_im(5) <= Deserializer_tapDelayComp_reg_im(5);
  Deserializer_tapout_re(6) <= Deserializer_tapDelayComp_reg_re(6);
  Deserializer_tapout_im(6) <= Deserializer_tapDelayComp_reg_im(6);
  Deserializer_tapout_re(7) <= Deserializer_tapDelayComp_reg_re(7);
  Deserializer_tapout_im(7) <= Deserializer_tapDelayComp_reg_im(7);
  Deserializer_tapout_re(8) <= Deserializer_tapDelayComp_reg_re(8);
  Deserializer_tapout_im(8) <= Deserializer_tapDelayComp_reg_im(8);
  Deserializer_tapout_re(9) <= Deserializer_tapDelayComp_reg_re(9);
  Deserializer_tapout_im(9) <= Deserializer_tapDelayComp_reg_im(9);
  Deserializer_tapout_re(10) <= Deserializer_tapDelayComp_reg_re(10);
  Deserializer_tapout_im(10) <= Deserializer_tapDelayComp_reg_im(10);
  Deserializer_tapout_re(11) <= Deserializer_tapDelayComp_reg_re(11);
  Deserializer_tapout_im(11) <= Deserializer_tapDelayComp_reg_im(11);
  Deserializer_tapout_re(12) <= Deserializer_tapDelayComp_reg_re(12);
  Deserializer_tapout_im(12) <= Deserializer_tapDelayComp_reg_im(12);
  Deserializer_tapout_re(13) <= Deserializer_tapDelayComp_reg_re(13);
  Deserializer_tapout_im(13) <= Deserializer_tapDelayComp_reg_im(13);
  Deserializer_tapout_re(14) <= Deserializer_tapDelayComp_reg_re(14);
  Deserializer_tapout_im(14) <= Deserializer_tapDelayComp_reg_im(14);
  Deserializer_tapDelayComp_reg_next_re(0) <= Deserializer_tapDelayComp_reg_re(1);
  Deserializer_tapDelayComp_reg_next_im(0) <= Deserializer_tapDelayComp_reg_im(1);
  Deserializer_tapDelayComp_reg_next_re(1) <= Deserializer_tapDelayComp_reg_re(2);
  Deserializer_tapDelayComp_reg_next_im(1) <= Deserializer_tapDelayComp_reg_im(2);
  Deserializer_tapDelayComp_reg_next_re(2) <= Deserializer_tapDelayComp_reg_re(3);
  Deserializer_tapDelayComp_reg_next_im(2) <= Deserializer_tapDelayComp_reg_im(3);
  Deserializer_tapDelayComp_reg_next_re(3) <= Deserializer_tapDelayComp_reg_re(4);
  Deserializer_tapDelayComp_reg_next_im(3) <= Deserializer_tapDelayComp_reg_im(4);
  Deserializer_tapDelayComp_reg_next_re(4) <= Deserializer_tapDelayComp_reg_re(5);
  Deserializer_tapDelayComp_reg_next_im(4) <= Deserializer_tapDelayComp_reg_im(5);
  Deserializer_tapDelayComp_reg_next_re(5) <= Deserializer_tapDelayComp_reg_re(6);
  Deserializer_tapDelayComp_reg_next_im(5) <= Deserializer_tapDelayComp_reg_im(6);
  Deserializer_tapDelayComp_reg_next_re(6) <= Deserializer_tapDelayComp_reg_re(7);
  Deserializer_tapDelayComp_reg_next_im(6) <= Deserializer_tapDelayComp_reg_im(7);
  Deserializer_tapDelayComp_reg_next_re(7) <= Deserializer_tapDelayComp_reg_re(8);
  Deserializer_tapDelayComp_reg_next_im(7) <= Deserializer_tapDelayComp_reg_im(8);
  Deserializer_tapDelayComp_reg_next_re(8) <= Deserializer_tapDelayComp_reg_re(9);
  Deserializer_tapDelayComp_reg_next_im(8) <= Deserializer_tapDelayComp_reg_im(9);
  Deserializer_tapDelayComp_reg_next_re(9) <= Deserializer_tapDelayComp_reg_re(10);
  Deserializer_tapDelayComp_reg_next_im(9) <= Deserializer_tapDelayComp_reg_im(10);
  Deserializer_tapDelayComp_reg_next_re(10) <= Deserializer_tapDelayComp_reg_re(11);
  Deserializer_tapDelayComp_reg_next_im(10) <= Deserializer_tapDelayComp_reg_im(11);
  Deserializer_tapDelayComp_reg_next_re(11) <= Deserializer_tapDelayComp_reg_re(12);
  Deserializer_tapDelayComp_reg_next_im(11) <= Deserializer_tapDelayComp_reg_im(12);
  Deserializer_tapDelayComp_reg_next_re(12) <= Deserializer_tapDelayComp_reg_re(13);
  Deserializer_tapDelayComp_reg_next_im(12) <= Deserializer_tapDelayComp_reg_im(13);
  Deserializer_tapDelayComp_reg_next_re(13) <= Deserializer_tapDelayComp_reg_re(14);
  Deserializer_tapDelayComp_reg_next_im(13) <= Deserializer_tapDelayComp_reg_im(14);
  Deserializer_tapDelayComp_reg_next_re(14) <= S_re_signed;
  Deserializer_tapDelayComp_reg_next_im(14) <= S_im_signed;

  Deserializer_muxOut_re(0) <= Deserializer_tapout_re(0);
  Deserializer_muxOut_re(1) <= Deserializer_tapout_re(1);
  Deserializer_muxOut_re(2) <= Deserializer_tapout_re(2);
  Deserializer_muxOut_re(3) <= Deserializer_tapout_re(3);
  Deserializer_muxOut_re(4) <= Deserializer_tapout_re(4);
  Deserializer_muxOut_re(5) <= Deserializer_tapout_re(5);
  Deserializer_muxOut_re(6) <= Deserializer_tapout_re(6);
  Deserializer_muxOut_re(7) <= Deserializer_tapout_re(7);
  Deserializer_muxOut_re(8) <= Deserializer_tapout_re(8);
  Deserializer_muxOut_re(9) <= Deserializer_tapout_re(9);
  Deserializer_muxOut_re(10) <= Deserializer_tapout_re(10);
  Deserializer_muxOut_re(11) <= Deserializer_tapout_re(11);
  Deserializer_muxOut_re(12) <= Deserializer_tapout_re(12);
  Deserializer_muxOut_re(13) <= Deserializer_tapout_re(13);
  Deserializer_muxOut_re(14) <= Deserializer_tapout_re(14);
  Deserializer_muxOut_re(15) <= signed(S_re);

  Deserializer_muxOut_im(0) <= Deserializer_tapout_im(0);
  Deserializer_muxOut_im(1) <= Deserializer_tapout_im(1);
  Deserializer_muxOut_im(2) <= Deserializer_tapout_im(2);
  Deserializer_muxOut_im(3) <= Deserializer_tapout_im(3);
  Deserializer_muxOut_im(4) <= Deserializer_tapout_im(4);
  Deserializer_muxOut_im(5) <= Deserializer_tapout_im(5);
  Deserializer_muxOut_im(6) <= Deserializer_tapout_im(6);
  Deserializer_muxOut_im(7) <= Deserializer_tapout_im(7);
  Deserializer_muxOut_im(8) <= Deserializer_tapout_im(8);
  Deserializer_muxOut_im(9) <= Deserializer_tapout_im(9);
  Deserializer_muxOut_im(10) <= Deserializer_tapout_im(10);
  Deserializer_muxOut_im(11) <= Deserializer_tapout_im(11);
  Deserializer_muxOut_im(12) <= Deserializer_tapout_im(12);
  Deserializer_muxOut_im(13) <= Deserializer_tapout_im(13);
  Deserializer_muxOut_im(14) <= Deserializer_tapout_im(14);
  Deserializer_muxOut_im(15) <= signed(S_im);

  Deserializer_regComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer_out1_re(0) <= to_signed(16#000#, 12);
      Deserializer_out1_im(0) <= to_signed(16#000#, 12);
      Deserializer_out1_re(1) <= to_signed(16#000#, 12);
      Deserializer_out1_im(1) <= to_signed(16#000#, 12);
      Deserializer_out1_re(2) <= to_signed(16#000#, 12);
      Deserializer_out1_im(2) <= to_signed(16#000#, 12);
      Deserializer_out1_re(3) <= to_signed(16#000#, 12);
      Deserializer_out1_im(3) <= to_signed(16#000#, 12);
      Deserializer_out1_re(4) <= to_signed(16#000#, 12);
      Deserializer_out1_im(4) <= to_signed(16#000#, 12);
      Deserializer_out1_re(5) <= to_signed(16#000#, 12);
      Deserializer_out1_im(5) <= to_signed(16#000#, 12);
      Deserializer_out1_re(6) <= to_signed(16#000#, 12);
      Deserializer_out1_im(6) <= to_signed(16#000#, 12);
      Deserializer_out1_re(7) <= to_signed(16#000#, 12);
      Deserializer_out1_im(7) <= to_signed(16#000#, 12);
      Deserializer_out1_re(8) <= to_signed(16#000#, 12);
      Deserializer_out1_im(8) <= to_signed(16#000#, 12);
      Deserializer_out1_re(9) <= to_signed(16#000#, 12);
      Deserializer_out1_im(9) <= to_signed(16#000#, 12);
      Deserializer_out1_re(10) <= to_signed(16#000#, 12);
      Deserializer_out1_im(10) <= to_signed(16#000#, 12);
      Deserializer_out1_re(11) <= to_signed(16#000#, 12);
      Deserializer_out1_im(11) <= to_signed(16#000#, 12);
      Deserializer_out1_re(12) <= to_signed(16#000#, 12);
      Deserializer_out1_im(12) <= to_signed(16#000#, 12);
      Deserializer_out1_re(13) <= to_signed(16#000#, 12);
      Deserializer_out1_im(13) <= to_signed(16#000#, 12);
      Deserializer_out1_re(14) <= to_signed(16#000#, 12);
      Deserializer_out1_im(14) <= to_signed(16#000#, 12);
      Deserializer_out1_re(15) <= to_signed(16#000#, 12);
      Deserializer_out1_im(15) <= to_signed(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer_innerRegEn = '1' THEN
        Deserializer_out1_re(0) <= Deserializer_muxOut_re(0);
        Deserializer_out1_im(0) <= Deserializer_muxOut_im(0);
        Deserializer_out1_re(1) <= Deserializer_muxOut_re(1);
        Deserializer_out1_im(1) <= Deserializer_muxOut_im(1);
        Deserializer_out1_re(2) <= Deserializer_muxOut_re(2);
        Deserializer_out1_im(2) <= Deserializer_muxOut_im(2);
        Deserializer_out1_re(3) <= Deserializer_muxOut_re(3);
        Deserializer_out1_im(3) <= Deserializer_muxOut_im(3);
        Deserializer_out1_re(4) <= Deserializer_muxOut_re(4);
        Deserializer_out1_im(4) <= Deserializer_muxOut_im(4);
        Deserializer_out1_re(5) <= Deserializer_muxOut_re(5);
        Deserializer_out1_im(5) <= Deserializer_muxOut_im(5);
        Deserializer_out1_re(6) <= Deserializer_muxOut_re(6);
        Deserializer_out1_im(6) <= Deserializer_muxOut_im(6);
        Deserializer_out1_re(7) <= Deserializer_muxOut_re(7);
        Deserializer_out1_im(7) <= Deserializer_muxOut_im(7);
        Deserializer_out1_re(8) <= Deserializer_muxOut_re(8);
        Deserializer_out1_im(8) <= Deserializer_muxOut_im(8);
        Deserializer_out1_re(9) <= Deserializer_muxOut_re(9);
        Deserializer_out1_im(9) <= Deserializer_muxOut_im(9);
        Deserializer_out1_re(10) <= Deserializer_muxOut_re(10);
        Deserializer_out1_im(10) <= Deserializer_muxOut_im(10);
        Deserializer_out1_re(11) <= Deserializer_muxOut_re(11);
        Deserializer_out1_im(11) <= Deserializer_muxOut_im(11);
        Deserializer_out1_re(12) <= Deserializer_muxOut_re(12);
        Deserializer_out1_im(12) <= Deserializer_muxOut_im(12);
        Deserializer_out1_re(13) <= Deserializer_muxOut_re(13);
        Deserializer_out1_im(13) <= Deserializer_muxOut_im(13);
        Deserializer_out1_re(14) <= Deserializer_muxOut_re(14);
        Deserializer_out1_im(14) <= Deserializer_muxOut_im(14);
        Deserializer_out1_re(15) <= Deserializer_muxOut_re(15);
        Deserializer_out1_im(15) <= Deserializer_muxOut_im(15);
      END IF;
    END IF;
  END PROCESS Deserializer_regComp_process;


  outputgen1: FOR k IN 0 TO 15 GENERATE
    P_re(k) <= std_logic_vector(Deserializer_out1_re(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 15 GENERATE
    P_im(k) <= std_logic_vector(Deserializer_out1_im(k));
  END GENERATE;

  Deserializer_regComp_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer_out2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer_innerRegCtrolEn = '1' THEN
        Deserializer_out2 <= Deserializer_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS Deserializer_regComp_1_process;


  ValidOut <= Deserializer_out2;

END rtl;

